generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum CarStatus {
  available
  rented
  maintenance
}

enum BookingStatus {
  pending
  confirmed
  cancelled
}

model Admins {
  id       Int     @id @default(autoincrement())
  username String  @unique
  password String  @db.VarChar(15)
  isActive Boolean @default(true)
}

model Customers {
  customerId    Int        @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String     @unique
  password      String     @db.VarChar(15)
  phone         String?    @db.VarChar(15)
  address       String?
  driverLicense String?    @unique
  totalPoints   Int        @default(0)
  Bookings      Bookings[]
}

model Branches {
  branchId   Int    @id @default(autoincrement())
  branchName String
  region     String
  lat        Float
  lng        Float

  Cars            Cars[]
  PickupBookings  Bookings[] @relation("PickupLocation")
  DropoffBookings Bookings[] @relation("DropoffLocation")
}

model CarTypes {
  carTypeId   Int         @id @default(autoincrement())
  carTypeName String
  CarModels   CarModels[]
}

model CarModels {
  carModelId   Int         @id @default(autoincrement())
  carTypeId    Int
  brand        String
  model        String
  color        String
  transmission String
  fuel         String
  seats        Int
  CarImages    CarImages[]
  Cars         Cars[]
  CarType      CarTypes    @relation(fields: [carTypeId], references: [carTypeId])
}

model CarImages {
  imageId    Int       @id @default(autoincrement())
  carModelId Int
  imageUrl   String
  CarModel   CarModels @relation(fields: [carModelId], references: [carModelId])
}

model Cars {
  carId        Int        @id @default(autoincrement())
  carModelId   Int
  licensePlate String     @unique
  status       CarStatus  @default(available)
  pricePerDay  Float
  branchId     Int?
  seatNumber   Int
  use_date     DateTime?
  CarModel     CarModels  @relation(fields: [carModelId], references: [carModelId])
  Branch       Branches?  @relation(fields: [branchId], references: [branchId])
  Bookings     Bookings[]
}

model Bookings {
  bookingId          Int           @id @default(autoincrement())
  customerId         Int
  carId              Int
  bookingDate        DateTime
  startDate          DateTime
  endDate            DateTime
  totalAmount        Float
  pickupLocationId  Int
  dropoffLocationId Int
  status              BookingStatus @default(pending)
  paymentDeadline    DateTime?
  Customer            Customers     @relation(fields: [customerId], references: [customerId])
  Car                 Cars          @relation(fields: [carId], references: [carId])
  PickupLocation      Branches      @relation(name: "PickupLocation", fields: [pickupLocationId], references: [branchId])
  DropoffLocation     Branches      @relation(name: "DropoffLocation", fields: [dropoffLocationId], references: [branchId])
  Payment             Payments?
}

model PaymentMethods {
  paymentMethodId Int        @id @default(autoincrement())
  methodName       String
  Payments        Payments[]
}

model Payments {
  paymentId        Int            @id @default(autoincrement())
  bookingId        Int            @unique
  paymentDate      DateTime
  amount            Float
  paymentMethodId Int
  slipImageUrl    String?
  Booking           Bookings       @relation(fields: [bookingId], references: [bookingId])
  PaymentMethod     PaymentMethods @relation(fields: [paymentMethodId], references: [paymentMethodId])
}